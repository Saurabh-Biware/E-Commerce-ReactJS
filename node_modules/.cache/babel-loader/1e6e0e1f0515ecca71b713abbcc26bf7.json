{"ast":null,"code":"import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyA9SVVLWc9MU9nAbdDdRTAVnl1nG0S0cHk\",\n  authDomain: \"exp-db-e5468.firebaseapp.com\",\n  databaseURL: \"https://exp-db-e5468.firebaseio.com\",\n  projectId: \"exp-db-e5468\",\n  storageBucket: \"exp-db-e5468.appspot.com\",\n  messagingSenderId: \"482617828819\",\n  appId: \"1:482617828819:web:6400a700e08355b8c67b26\",\n  measurementId: \"G-6N5PMH4Y4Q\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/saurabhbiware/Documents/React-JS-projects/E-Commerce-React/e-commercereact/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAI;AACRC,EAAAA,MAAM,EAAE,yCADA;AAERC,EAAAA,UAAU,EAAE,8BAFJ;AAGRC,EAAAA,WAAW,EAAE,qCAHL;AAIRC,EAAAA,SAAS,EAAE,cAJH;AAKRC,EAAAA,aAAa,EAAE,0BALP;AAMRC,EAAAA,iBAAiB,EAAE,cANX;AAORC,EAAAA,KAAK,EAAE,2CAPC;AAQRC,EAAAA,aAAa,EAAE;AARP,CAAhB;AAWMT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AA0Bb,OAAO,MAAMgB,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AAEP,OAAO,MAAMf,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMgB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAG;AAAX,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config  = {\n        apiKey: \"AIzaSyA9SVVLWc9MU9nAbdDdRTAVnl1nG0S0cHk\",\n        authDomain: \"exp-db-e5468.firebaseapp.com\",\n        databaseURL: \"https://exp-db-e5468.firebaseio.com\",\n        projectId: \"exp-db-e5468\",\n        storageBucket: \"exp-db-e5468.appspot.com\",\n        messagingSenderId: \"482617828819\",\n        appId: \"1:482617828819:web:6400a700e08355b8c67b26\",\n        measurementId: \"G-6N5PMH4Y4Q\"\n      };\n\n      firebase.initializeApp(config);\n\n      export const createUserProfileDocument = async (userAuth, additionalData) => {\n        if (!userAuth) return;\n      \n        const userRef = firestore.doc(`users/${userAuth.uid}`);\n      \n        const snapShot = await userRef.get();\n      \n        if (!snapShot.exists) {\n          const { displayName, email } = userAuth;\n          const createdAt = new Date();\n          try {\n            await userRef.set({\n              displayName,\n              email,\n              createdAt,\n              ...additionalData\n            });\n          } catch (error) {\n            console.log('error creating user', error.message);\n          }\n        }\n      \n        return userRef;\n      };\n      \n\nexport const auth = firebase.auth();\n\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt : 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n"]},"metadata":{},"sourceType":"module"}